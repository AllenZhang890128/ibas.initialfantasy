<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE DataStructureOrchestration>
<ns2:DataStructureOrchestration
    xmlns:ns2="http://colorcoding.org/btulz/transformers">
    <Name>sql_mysql_ibas_initialization</Name>
    <Description>基于MYSQL的结构映射说明</Description>
    <Integrated>true</Integrated>
    <DriverName>com.mysql.jdbc.Driver</DriverName>
    <DbUrl>jdbc:mysql://${DbServer}:${DbPort}/mysql?useUnicode=true&amp;characterEncoding=utf8</DbUrl>
    <DbUser>${DbUser}</DbUser>
    <DbPassword>${DbPassword}</DbPassword>
    <Action Name="create db" Isolated="true">
        <Step Name="check and create db">
            <Script>
                create database if not exists `${DbName}` character set utf8;
            </Script>
        </Step>
    </Action>
    <Action Name="create stored procedures ${Company}_SP_TRANSACTION_NOTIFICATION">
        <Step Name="check and drop exists stored procedures">
            <Script>
                DROP PROCEDURE IF EXISTS `${DbName}`.`${Company}_SP_TRANSACTION_NOTIFICATION`;
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
                CREATE PROCEDURE `${DbName}`.`${Company}_SP_TRANSACTION_NOTIFICATION` (
                    object_type varchar(20),                  --对象类型（BOCode）
                    transaction_type char(1),                 --业务类型（Add:A-添加, Update:U-更新, Delete:D-删除）
                    num_of_cols_in_key int,                   --主键个数
                    list_of_key_cols_tab_del varchar(255),    --主键名称
                    list_of_cols_val_tab_del varchar(255)     --主键值
                )
                BEGIN
                    declare error int;                             --返回值(0 无错误)
                    declare error_message varchar(200);            --返回的消息
                    set error = 0;
                    set error_message = N'OK';
                    /*----------------------------------------------------------------------------------------------------------------------------*/
                    -- ADD YOUR CODE HERE
                    /* ----------------------------------------------------------------------------------------------------------------------------*/
                    -- return
                    select error, error_message;
                END;
            </Script>
        </Step>
    </Action>
    <Action Name="create stored procedures ${Company}_SYS_SP_GET_USER_MODULES">
        <Step Name="check stored procedures exists">
            <Script>
                DROP PROCEDURE IF EXISTS `${DbName}`.`${Company}_SYS_SP_GET_USER_MODULES`;
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
                CREATE PROCEDURE `${DbName}`.`${Company}_SYS_SP_GET_USER_MODULES` (
                    platform nvarchar(36),           /*平台代码*/
                    userCode nvarchar(8)             /*用户编码*/
                )
                BEGIN
                    IF EXISTS (SELECT 0 FROM `${Company}_SYS_USER` WHERE `UserCode` = userCode AND `Super` = 'Y')  THEN
                        /* 超级用户全部权限 */
                        SELECT A.*,'A' AuthValue
                        FROM `${Company}_SYS_MODULE` A
                        WHERE A.`PlatformId` = platform AND A.`Activated` = 'Y';
                    ELSE
                        /* 非超级用户，角色权限 */
                        SELECT A.*,C.`AuthValue`
                        FROM `${Company}_SYS_MODULE` A INNER JOIN (
                            SELECT DISTINCT B.`ModuleId`,B.`AuthValue`
                            FROM `${Company}_SYS_PRIVILEGE` B
                            WHERE B.`PlatformId` = platform AND B.`AuthValue` &lt;&gt; 'N' AND B.`RoleCode` IN (
                                SELECT B.`Role` 
                                FROM `${Company}_SYS_ORGSTRC` A INNER JOIN `${Company}_SYS_ORGROLE` B ON A.`ObjectKey` = B.`ObjectKey`
                                      INNER JOIN `${Company}_SYS_ROLEMEM` C ON B.`ObjectKey` = C.`ObjectKey` AND B.`LineId` = C.`RoleId`
                                WHERE A.`ValidDate` &lt;= GETDATE() AND A.`InvalidDate` &gt;= GETDATE() AND C.`Member` = userCode)
                        ) C ON A.`ModuleId` = C.`ModuleID`
                        WHERE A.`PlatformId` = platform AND A.`Activated` = 'Y';
                    END IF;
                END;
            </Script>
        </Step>
    </Action>
    <Action Name="create stored procedures ${Company}_SYS_SP_GET_USER_PRIVILEGES">
        <Step Name="check stored procedures exists">
            <Script>
              DROP PROCEDURE IF EXISTS `${DbName}`.`${Company}_SYS_SP_GET_USER_PRIVILEGES`;
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
              CREATE PROCEDURE `${DbName}`.`${Company}_SYS_SP_GET_USER_PRIVILEGES` (
                    IN platform nvarchar(36),           --平台代码
                    IN userCode nvarchar(8)             --用户编码
              )
              BEGIN
                IF EXISTS (SELECT 0 FROM `${Company}_SYS_USER` WHERE `Code` = userCode AND `Super` = 'Y')
                    -- 超级用户全部权限                    
                    SELECT TOP 0 'M' "Source", `ModuleId` "Target", `AuthValue` "Value"
                    FROM "${Company}_SYS_PRIVILEGE"
                ELSE
                    -- 非超级用户，角色权限
                    -- 业务对象的权限设置
                    SELECT 'B' "Source", `BOCode` "Target", `Self` "Value"
                    FROM `${Company}_SYS_OWNERSHIP`
                    WHERE `UserCode` = userCode
                    UNION ALL
                    SELECT `Source`, `Target`,  `Value`
                    FROM (
                        -- 模块的权限设置
                        SELECT 'M' "Source", `ModuleId` "Target", `AuthValue` "Value", `RoleCode`
                        FROM `${Company}_SYS_PRIVILEGE`
                        WHERE `PlatformId` = platform AND `Activated` = 'Y' AND IFNULL(`Target`,'') = ''
                        UNION ALL
                        -- 应用的权限设置
                        SELECT 'A' "Source", `Target` "Target", `AuthValue` "Value", `RoleCode`
                        FROM "${Company}_SYS_PRIVILEGE"
                        WHERE `PlatformId` = platform AND `Activated` = 'Y' AND IFNULL(`Target`,'') &lt;&gt; ''
                    ) T0 
                    WHERE T0.`RoleCode` IN (
                        SELECT T1.`Role`
                        FROM `${Company}_SYS_ORGSTRC` T0 INNER JOIN `${Company}_SYS_ORGROLE` T1 ON T0.`ObjectKey` = T1.`ObjectKey`
                                INNER JOIN `${Company}_SYS_ROLEMEM` T2 ON T1.`ObjectKey` = T2.`ObjectKey` AND T1.`LineId` = T2.`RoleId`
                        WHERE T2.`Member` = userCode
                    )
              END;
            </Script>
        </Step>
    </Action>
</ns2:DataStructureOrchestration>
