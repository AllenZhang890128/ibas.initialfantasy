<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE DataStructureOrchestration>
<ns2:DataStructureOrchestration
    xmlns:ns2="http://colorcoding.org/btulz/transformers">
    <Name>sql_pgsql_ibas_initialization</Name>
    <Description>基于PGSQL的结构映射说明</Description>
    <Integrated>true</Integrated>
    <DriverName>org.postgresql.Driver</DriverName>
    <DbUrl>jdbc:postgresql://${DbServer}:${DbPort}/${DbName}</DbUrl>
    <DbUser>${DbUser}</DbUser>
    <DbPassword>${DbPassword}</DbPassword>
    <Action Name="create db" Isolated="true" DbUrl="jdbc:postgresql://${DbServer}:${DbPort}/postgres">
        <Step Name="check db exists">
            <Script>
                select count(0) from pg_database where datname = '${DbName}';
            </Script>
        </Step>
        <Step Name="create db" RunOnValue="0">
            <Script>
                 create database "${DbName}";
            </Script>
        </Step>
    </Action>
    <Action Name="create stored procedures ${Company}_SP_TRANSACTION_NOTIFICATION">
        <Step Name="check and drop exists stored procedures">
            <Script>
                DROP FUNCTION IF EXISTS "${Company}_SP_TRANSACTION_NOTIFICATION"(character varying, character, integer, character varying, character varying);
            </Script>
        </Step>
        <Step Name="check and drop exists return type">
            <Script>
                DROP TYPE IF EXISTS "RESULT_TYPE_${Company}_SP_TRANSACTION_NOTIFICATION";
            </Script>
        </Step>
        <Step Name="create return type">
            <Script>
                CREATE TYPE "RESULT_TYPE_${Company}_SP_TRANSACTION_NOTIFICATION" AS ("Error" integer,"Message" varchar(200));
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
                CREATE OR REPLACE FUNCTION "${Company}_SP_TRANSACTION_NOTIFICATION" (
                    object_type character varying,                             /*对象类型（BOCode）*/
                    transaction_type character,                                /*业务类型（Add:A-添加, Update:U-更新, Delete:D-删除）*/
                    num_of_cols_in_key integer,                                /*主键个数*/
                    list_of_key_cols_tab_del character varying,                /*主键名称*/
                    list_of_cols_val_tab_del character varying                 /*主键值*/
                ) RETURNS SETOF "RESULT_TYPE_${Company}_SP_TRANSACTION_NOTIFICATION" AS $_$
                DECLARE
                    error  integer;                                            /*返回值(0 无错误)*/
                    error_message varchar (200);                               /*返回的消息*/
                    result record;
                BEGIN
                    /* 返回值 */
                    error = 0;
                    error_message = N'OK';
                    /*--------------------------------------------------------------------------------------------------------------------------------*/
                    /*ADD YOUR CODE HERE*/
                    /*--------------------------------------------------------------------------------------------------------------------------------*/
                    /*return*/
                    for result in select error "error",error_message "message" loop 
                      return next result; 
                    end loop;
                END;
                $_$ LANGUAGE plpgsql;
            </Script>
        </Step>
    </Action>
    <Action Name="create stored procedures ${Company}_SYS_SP_GET_USER_MODULES">
        <Step Name="check and drop exists stored procedures">
            <Script>
                DROP FUNCTION IF EXISTS "${Company}_SYS_SP_GET_USER_MODULES"(character varying, character varying);
            </Script>
        </Step>
        <Step Name="check and drop exists return type">
            <Script>
                DROP TYPE IF EXISTS "RESULT_TYPE_${Company}_SYS_SP_GET_USER_MODULES";
            </Script>
        </Step>
        <Step Name="create return type">
            <Script>
                CREATE TYPE "RESULT_TYPE_${Company}_SYS_SP_GET_USER_MODULES" AS ("ModuleId" varchar(60),"ModuleName" varchar(100),"ModuleCategory" varchar(20),"ModuleEntry" varchar(180));
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
                CREATE OR REPLACE FUNCTION "${Company}_SYS_SP_GET_USER_MODULES" (
                    platform character varying,        /*平台代码*/
                    userCode character varying         /*用户编码*/
                ) RETURNS SETOF "RESULT_TYPE_${Company}_SYS_SP_GET_USER_MODULES" AS $_$
                DECLARE
                    result record;
                BEGIN
                    IF EXISTS (SELECT 0 FROM "${Company}_SYS_USER" WHERE "Code" = userCode AND "Super" = 'Y')  THEN
                        /* 超级用户全部权限 */                            
                        FOR RESULT IN
                            SELECT A."ModuleId",A."ModuleName",A."ModuleCategory",A."ModuleEntry"
                            FROM "${Company}_SYS_MODULE" A
                            WHERE A."PlatformId" = platform AND A."Activated" = 'Y'
                        LOOP 
                          RETURN NEXT RESULT; 
                        END LOOP;
                    ELSE
                        /* 非超级用户，角色权限 */
                        FOR RESULT IN
                            SELECT A."ModuleId",A."ModuleName",A."ModuleCategory",A."ModuleEntry"
                            FROM "${Company}_SYS_MODULE" A INNER JOIN (
                                SELECT DISTINCT B."ModuleId",B."AuthValue"
                                FROM "${Company}_SYS_PRIVILEGE" B
                                WHERE B."PlatformId" = platform AND B."AuthValue" &lt;&gt; 'N' AND B."RoleCode" IN (
                                    SELECT B."Role" 
                                    FROM "${Company}_SYS_ORGSTRC" A INNER JOIN "${Company}_SYS_ORGROLE" B ON A."ObjectKey" = B."ObjectKey"
                                          INNER JOIN "${Company}_SYS_ROLEMEM" C ON B."ObjectKey" = C."ObjectKey" AND B."LineId" = C."RoleId"
                                    WHERE A."ValidDate" &lt;= current_date AND A."InvalidDate" &gt;= current_date AND C."Member" = userCode)
                            ) C ON A."ModuleId" = C."ModuleId"
                            WHERE A."PlatformId" = platform AND A."Activated" = 'Y'
                        LOOP 
                          RETURN NEXT RESULT; 
                        END LOOP;
                    END IF;
                END;
                $_$ LANGUAGE plpgsql;
            </Script>
        </Step>
    </Action>
    <Action Name="create stored procedures ${Company}_SYS_SP_GET_USER_PRIVILEGES">
        <Step Name="check and drop exists stored procedures">
            <Script>
                DROP FUNCTION IF EXISTS "${Company}_SYS_SP_GET_USER_PRIVILEGES"(character varying, character varying, character varying);
            </Script>
        </Step>
        <Step Name="check and drop exists return type">
            <Script>
                DROP TYPE IF EXISTS "RESULT_TYPE_${Company}_SYS_SP_GET_USER_PRIVILEGES";
            </Script>
        </Step>
        <Step Name="create return type">
            <Script>
                CREATE TYPE "RESULT_TYPE_${Company}_SYS_SP_GET_USER_PRIVILEGES" AS ("Source" varchar(1), "Target" varchar(60), "Value" varchar(1));
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
                CREATE OR REPLACE FUNCTION "${Company}_SYS_SP_GET_USER_PRIVILEGES" (
                    platform character varying,        /*平台代码*/
                    userCode character varying         /*用户编码*/
                ) RETURNS SETOF "RESULT_TYPE_${Company}_SYS_SP_GET_USER_PRIVILEGES" AS $_$
                DECLARE
                    result record;
                BEGIN
                    IF EXISTS (SELECT 0 FROM "${Company}_SYS_USER" WHERE "Code" = userCode AND "Super" = 'Y')  THEN
                        /* 超级用户全部权限 */                            
                        FOR RESULT IN
                            SELECT 'M' "Source", "ModuleId" "Target", "AuthValue" "Value"
                            FROM "${Company}_SYS_PRIVILEGE"
                            LIMIT 0
                        LOOP 
                          RETURN NEXT RESULT; 
                        END LOOP;
                    ELSE
                        -- 非超级用户，角色权限
                        -- 业务对象的权限设置
                        FOR RESULT IN
                            SELECT 'B' "Source", "BOCode" "Target", "Self" "Value"
                            FROM "${Company}_SYS_OWNERSHIP"
                            WHERE "UserCode" = userCode
                            UNION ALL
                            SELECT "Source", "Target",  "Value"
                            FROM (
                                -- 模块的权限设置
                                SELECT 'M' "Source", "ModuleId" "Target", "AuthValue" "Value", "RoleCode"
                                FROM "${Company}_SYS_PRIVILEGE"
                                WHERE "PlatformId" = platform AND "Activated" = 'Y' AND COALESCE("Target",'') = ''
                                UNION ALL
                                -- 应用的权限设置
                                SELECT 'A' "Source", "Target" "Target", "AuthValue" "Value", "RoleCode"
                                FROM "${Company}_SYS_PRIVILEGE"
                                WHERE "PlatformId" = platform AND "Activated" = 'Y' AND COALESCE("Target",'') &lt;&gt; ''
                            ) T0 
                            WHERE T0."RoleCode" IN (
                                SELECT T1."Role"
                                FROM "${Company}_SYS_ORGSTRC" T0 INNER JOIN "${Company}_SYS_ORGROLE" T1 ON T0."ObjectKey" = T1."ObjectKey"
                                      INNER JOIN "${Company}_SYS_ROLEMEM" T2 ON T1."ObjectKey" = T2."ObjectKey" AND T1."LineId" = T2."RoleId"
                                WHERE T0."ValidDate" &lt;= current_date AND T0."InvalidDate" &gt;= current_date AND T2."Member" = userCode
                            )
                        LOOP 
                          RETURN NEXT RESULT; 
                        END LOOP;
                    END IF;
                END;
                $_$ LANGUAGE plpgsql;
            </Script>
        </Step>
    </Action>
</ns2:DataStructureOrchestration>